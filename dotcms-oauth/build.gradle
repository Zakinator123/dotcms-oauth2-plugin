plugins {
    id "biz.aQute.bnd.builder"
    id "io.freefair.lombok" version "5.3.0"
    id "java"
}

sourceSets {
    main {
        resources {
            srcDirs "src/main/resources","build/generated/libs"
        }
    }
}

sourceCompatibility = '1.8'
version = '2.0.0'

configurations {
    pluginLibs
}

dependencies {
    compile (group: 'com.dotcms', name: 'dotcms', version: '5.3.8.4') { transitive = true }
    compile group: 'software.amazon.awssdk', name: 'ssm', version: '2.15.33'
    compile group: 'org.scribe', name: 'scribe', version: '1.3.7'
    compileOnly group: 'javax.servlet', name: 'jsp-api', version: '2.0'

    pluginLibs 'software.amazon.serverless:aws-ssm-java-caching-client:1.0.0'
    pluginLibs 'org.slf4j:slf4j-api:1.7.7'
    pluginLibs 'org.slf4j:slf4j-simple:1.7.7'
    pluginLibs 'org.slf4j:jcl-over-slf4j:1.7.1'
    pluginLibs group: 'org.scribe', name: 'scribe', version: '1.3.7'

    testImplementation 'org.junit.jupiter:junit-jupiter:5.4.2'
    testImplementation 'com.squareup.okhttp3:okhttp:4.0.1'
    testImplementation 'com.squareup.okhttp3:mockwebserver:4.0.1'
    testCompile group: 'org.assertj', name: 'assertj-core', version: '3.6.1'
}

test {
    useJUnitPlatform()
}


def classPathLibraries() {
    def bundleClassPath = ""
    configurations.pluginLibs.forEach({ bundleClassPath += "/${it.name}," })
    if (bundleClassPath != "") {
        bundleClassPath = '.,' + bundleClassPath
    }
    logger.info("Dependencies Class Path: ${bundleClassPath}")
    return bundleClassPath
}

import java.util.jar.*

/////////////////////////
//Plugin jar
/////////////////////////

// Order matters - bundle classpath must go after "Import-Package"
jar {
    manifest {
        attributes (
                'Bundle-Vendor': 'dotCMS',
                'Bundle-Description': 'dotCMS - OAuth / OIDC ',
                'Bundle-DocURL': 'https://dotcms.com/',
                'Bundle-Activator': 'com.dotcms.osgi.oauth.Activator',
                'Provide-Capability': 'osgi.contract;osgi.contract=JavaServlet;version:Version="3.1";uses:="javax.servlet,javax.servlet.http,javax.servlet.descriptor,javax.servlet.annotation"',
                'Import-Package': '*;version=0',
                'Bundle-ClassPath': "${classPathLibraries()}"
        )
    }
}

task copyToLib(type: Copy) {
    into "build/generated/libs"
    from configurations.pluginLibs
}

assemble.dependsOn copyToLib
jar.finalizedBy 'fragmentJar'

/////////////////////////
//Fragment jar
/////////////////////////

ext {
    bundleName = "OAuth  fragment"
    bundleDescription = "dotCMS - OAuth  fragment"
    fragmentHost = "system.bundle; extension:=framework"
    bundleSymbolicName = "" //Auto generated based on the plugin jar
    bundleVersion = "" //Auto generated based on the plugin jar
    importPackage = "" //Auto generated based on the plugin jar
    bundleManifestVersion = "" //Auto generated based on the plugin jar
    bundleDocURL = "" //Auto generated based on the plugin jar
    bundleVendor = "" //Auto generated based on the plugin jar
}

/**
 * Reads the Manifest file of the just created plugin jar in order to get the required info
 * to automatically create the fragment jar.
 */
task readManifesttAttributes {
    doFirst {
        File file = configurations.baseline.singleFile
        JarFile jar = new JarFile(file)
        Attributes manifest = jar.getManifest().getMainAttributes()
        bundleSymbolicName = "${manifest.getValue('Bundle-SymbolicName')}"
        bundleVersion = "${manifest.getValue('Bundle-Version')}"
        importPackage = "${manifest.getValue('Import-Package')}"
        bundleManifestVersion = "${manifest.getValue('Bundle-ManifestVersion')}"
        bundleDocURL = "${manifest.getValue('Bundle-DocURL')}"
        bundleVendor = "${manifest.getValue('Bundle-Vendor')}"
    }
}

task fragmentJar(type: Jar) {

    doFirst {
        //Setting the fragment jar name
        baseName = project.name
        archiveName = "${baseName}.fragment-${version}.jar"

        manifest {
            attributes (
                    'Bundle-Name': "${bundleName}",
                    'Bundle-Description': "${bundleDescription}",
                    'Bundle-Vendor': "${bundleVendor}",
                    'Bundle-Version': "${version}",
                    'Bundle-SymbolicName': "${baseName}.fragment",
                    'Bundle-ManifestVersion': "${bundleManifestVersion}",
                    'Bundle-DocURL': "${bundleDocURL}",
                    'Fragment-Host': "${fragmentHost}",
                    'Export-Package': "version=0"
            )
        }
    }
}
fragmentJar.dependsOn 'readManifesttAttributes'